name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHONVERSION: "3.12"

jobs:
  check-version:
    runs-on: macos-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install toml

      - name: Get version from main
        id: get-main-version
        run: |
          git checkout main
          MAIN_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "::set-output name=MAIN_VERSION::$MAIN_VERSION"

      - name: Compare versions
        id: compare-versions
        run: |
          CUR_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          MAIN_VERSION="${{ steps.get-main-version.outputs.MAIN_VERSION }}"

          echo "Current version in pyproject.toml: $CUR_VERSION"
          echo "Version on main branch: $MAIN_VERSION"

          if [ "$CUR_VERSION" == "$MAIN_VERSION" ]; then
            echo "The version hasn't changed. Skipping release."
            exit 0
          fi

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      - name: Set up Python ${{ env.PYTHONVERSION }}
        run: |
          uv python install ${{ env.PYTHONVERSION }}
          uv venv
      - name: Install dependencies
        run: |
          uv pip install .
          uv pip install twine build
      - name: release
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_PUBLISHER_TOKEN }} # TODO Fix valid token
        run: | # TODO set valid repository
          uv run python -m build --sdist
          uv run twine upload -r testpypi dist/*
